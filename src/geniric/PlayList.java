/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package geniric;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.io.File;
import java.text.DecimalFormat;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 *
 * @author ASUS
 */
public class PlayList extends javax.swing.JFrame {
    KoleksiMusik koleksi = new KoleksiMusik();
    /**
     * Creates new form PlayList
     */
    public PlayList(TableModel Koleksi) {
        initComponents();
        tblPlayList.setModel(Koleksi);
        resizeListener();
    }

    private PlayList() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    //method untuk pengaturan lebar dan tinggi kolom pada tabel
    private void resizeListener(){
        addComponentListener(new ComponentAdapter() {
        @Override
        public void componentResized(ComponentEvent e) {
        resizeColumns();
 }
 });
 }
 
 private void resizeColumns() {
    float[] columnWidthPercentage = {90.0f,10.0f};
    int tW = tblPlayList.getWidth();
    TableColumn column;
    TableColumnModel jTableColumnModel = tblPlayList.getColumnModel();
    int cantCols = jTableColumnModel.getColumnCount();
    for (int i = 0; i < cantCols; i++) {
    column = jTableColumnModel.getColumn(i); 
    int pWidth = Math.round(columnWidthPercentage[i] * tW);
    column.setPreferredWidth(pWidth);
    tblPlayList.setRowHeight(27); 
    }
 }

 //method untuk membaca ukuran file
  private String fileSizeOf(File file){
    DecimalFormat format = new DecimalFormat("#.##");
    long MB = 1024 * 1024;
    long KB = 1024;
    final double length = file.length();
    if (length > MB) {
    return format.format(length / MB) + " MB";
    }
    if (length > KB) {
    return format.format(length / KB) + " KB";
    }
    return format.format(length) + " B";
 }
  
  //method untuk mendapatkan ekstensi sebuah file 
  private String extensionOf(File file) {
    String fileExtension="";
    String fileName=file.getName();
    if(fileName.contains(".") && fileName.lastIndexOf(".")!= 0){
    fileExtension =
    fileName.substring(fileName.lastIndexOf(".")+1);
    }
    return fileExtension;
    }
  
  //method untuk mengoleksi semua file mp3 yang di pilih
  private void addFiles(File[] files){
    for (File file : files) {
    String path = file.getAbsolutePath();
    String fn = file.getName();
    String fileName = fn.substring(0, fn.length()-4);
    String fileSize = fileSizeOf(file);
    String extension = "";
    int i = path.lastIndexOf('.');
    if (i > 0) {
    extension = extensionOf(file);
    }
    musik m = new musik(path,fileName,fileSize,extension);
    koleksi.add(m); 
    }
}

  //method untuk membaca semua file mp di dalam foolder dan sub-folder
 private void addFolder(File dir){
    File[] listOfFiles = dir.listFiles();
    for (File listOfFile : listOfFiles) {
    if (listOfFile.isFile()) {
    String path = listOfFile.getAbsolutePath();
    String fn = listOfFile.getName();
    String fileName = fn.substring(0, fn.length()-4);
    String fileSize = fileSizeOf(listOfFile);
    String extension;
    int i = path.lastIndexOf('.');
    if (i > 0) {
    extension = extensionOf(listOfFile);
    if("mp3".equalsIgnoreCase(extension)){  
    musik m = new 
    musik(path,fileName,fileSize,extension);
    koleksi.add(m);
}
} 
} else if (listOfFile.isDirectory()) {
addFolder(listOfFile); 
}
} 
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupTombol = new javax.swing.JPopupMenu();
        addFiles = new javax.swing.JMenuItem();
        addFolder = new javax.swing.JMenuItem();
        clearPlaylist = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        pnFooter = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPlayList = new javax.swing.JTable();
        btnPlaylist = new javax.swing.JButton();

        addFiles.setText("Add File(s)");
        addFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFilesActionPerformed(evt);
            }
        });
        jPopupTombol.add(addFiles);

        addFolder.setText("Add Foolder");
        addFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFolderActionPerformed(evt);
            }
        });
        jPopupTombol.add(addFolder);

        clearPlaylist.setText("Clear Playlist");
        clearPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPlaylistActionPerformed(evt);
            }
        });
        jPopupTombol.add(clearPlaylist);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        tblPlayList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblPlayList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPlayListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPlayList);

        btnPlaylist.setText("Playlist");
        btnPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaylistActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnFooterLayout = new javax.swing.GroupLayout(pnFooter);
        pnFooter.setLayout(pnFooterLayout);
        pnFooterLayout.setHorizontalGroup(
            pnFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnFooterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnPlaylist)
                .addContainerGap(322, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        pnFooterLayout.setVerticalGroup(
            pnFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnFooterLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(btnPlaylist)
                .addGap(23, 23, 23))
        );

        jPanel1.add(pnFooter, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFilesActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setDialogType(JFileChooser.FILES_ONLY);
        fc.setMultiSelectionEnabled(true);
        fc.setDialogTitle("Add Files");
        fc.setAcceptAllFileFilterUsed(false);
        fc.setFileFilter(new FileNameExtensionFilter("MP3 File (*.mp3)","mp3"));
        fc.setApproveButtonText("Add Files");
        int show = fc.showOpenDialog(this);
        if(show == JFileChooser.APPROVE_OPTION){
            File[] files = fc.getSelectedFiles();
            addFiles(files);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_addFilesActionPerformed

    private void btnPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaylistActionPerformed
        popupTombol.show(btnPlaylist,
                btnPlaylist.getWidth(),
                btnPlaylist.getHeight()/2);
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPlaylistActionPerformed

    private void addFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFolderActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setDialogType(JFileChooser.DIRECTORIES_ONLY);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setDialogTitle("Add Folder");
        fc.setApproveButtonText("Add Folder");
        int show = fc.showOpenDialog(this);
        if(show == JFileChooser.APPROVE_OPTION){
            File file = fc.getSelectedFile();
            addFolder(file);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_addFolderActionPerformed

    private void clearPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPlaylistActionPerformed
        koleksi.clear();
        // TODO add your handling code here:
    }//GEN-LAST:event_clearPlaylistActionPerformed

    private void tblPlayListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPlayListMouseClicked
        // TODO add your handling code here:
       int i = tblPlayList.getSelectedRow();
        if (evt.getClickCount() == 2 && i != -1) {
            musik d = koleksi.get(i);
            JOptionPane.showMessageDialog(this, "<html>"
            + "<head>"
            + "<style>"
            + "table { border-collapse: collapse; border:1px solid blue; }"
            + "tr { border-bottom:1pt solid black; }"
                    + "</style>"
            + "</head>"
            + "<body>"
            + "<h3>Detail Dokumen</h3>"
            + "<table>"
            + "<tr><td>Lokasi</td?<td>:</td><td> " + d.getPath()+ "</td></tr>"
            + "<tr><td>Nama</td?<td>:</td><td> " + d.getFileName()+ "</td></tr>"
            + "<tr><td>Ukuran</td?<td>:</td><td> " + d.getFileSize()+ "</td></tr>"
            + "<tr><td>Ekstensi</td?<td>:</td><td> " + d.getExtension()+ "</td></tr>"
            + "</table>"
            + "</body>"
            + "</html>"
            );
            
        }
    }//GEN-LAST:event_tblPlayListMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlayList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlayList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlayList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlayList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlayList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addFiles;
    private javax.swing.JMenuItem addFolder;
    private javax.swing.JButton btnPlaylist;
    private javax.swing.JMenuItem clearPlaylist;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupTombol;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnFooter;
    private javax.swing.JTable tblPlayList;
    // End of variables declaration//GEN-END:variables

    private static class popupTombol {

        private static void show(JButton btnPlaylist, int width, int i) {
            throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
        }

        public popupTombol() {
        }
    }
}
